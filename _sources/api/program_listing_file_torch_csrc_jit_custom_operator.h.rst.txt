:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_jit_custom_operator.h:

Program Listing for File custom_operator.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_jit_custom_operator.h>` (``torch/csrc/jit/custom_operator.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <torch/csrc/jit/operator.h>
   #include <ATen/core/stack.h>
   #include <ATen/core/op_registration/op_registration.h>
   
   namespace torch {
   namespace jit {
   
   struct TORCH_API RegisterOperators {
     RegisterOperators() = default;
   
     RegisterOperators(std::vector<Operator> operators) {
       for (Operator& o : operators) {
         registerOperator(std::move(o));
       }
     }
   
     template <typename Implementation>
     C10_DEPRECATED_MESSAGE("torch::jit::RegisterOperators is deprecated. Please use torch::RegisterOperators instead.")
     RegisterOperators(const std::string& name, Implementation&& implementation) {
       op_(name, std::forward<Implementation>(implementation));
     }
   
     template <typename Implementation>
     C10_DEPRECATED_MESSAGE("torch::jit::RegisterOperators is deprecated. Please use torch::RegisterOperators instead.")
     RegisterOperators& op(
         const std::string& name,
         Implementation&& implementation) {
       op_(name, std::forward<Implementation>(implementation));
   
       return *this;
     }
   
   private:
   
     template <typename Implementation>
     void op_(const std::string& name, Implementation&& implementation) {
       registrars_.emplace_back(std::make_shared<c10::RegisterOperators>(name, std::forward<Implementation>(implementation)));
     }
   
     // A c10::RegisterOperators instance is not copyable, so to make
     // torch::jit::RegisterOperators copyable, we use shared_ptrs.
     // We need to keep the c10::RegisterOperators instances around
     // because this is an RAII pattern. In the destructor, the registered
     // ops get de-registered.
     std::vector<std::shared_ptr<c10::RegisterOperators>> registrars_;
   };
   
   } // namespace jit
   
   } // namespace torch
