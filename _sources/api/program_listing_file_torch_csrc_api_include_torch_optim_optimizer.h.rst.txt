:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_optim_optimizer.h:

Program Listing for File optimizer.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_optim_optimizer.h>` (``torch/csrc/api/include/torch/optim/optimizer.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: none

   #pragma once
   
   #include <algorithm>
   #include <functional>
   #include <iterator>
   #include <memory>
   #include <string>
   #include <vector>
   
   namespace at {
   class Tensor;
   } // namespace at
   
   namespace torch {
   using at::Tensor;
   namespace detail {
   template <typename T>
   class CursorBase;
   } // namespace detail
   namespace serialize {
   class OutputArchive;
   class InputArchive;
   } // namespace serialize
   } // namespace torch
   
   namespace torch {
   namespace optim {
   namespace detail {
   class OptimizerBase {
    public:
     using ParameterCursor = torch::detail::CursorBase<Tensor>;
   
     explicit OptimizerBase(std::vector<Tensor> parameters);
   
     explicit OptimizerBase(const ParameterCursor& cursor);
   
     virtual ~OptimizerBase() = default;
   
     void add_parameters(const std::vector<Tensor>& parameters);
   
     void add_parameters(const ParameterCursor& cursor);
   
     virtual void zero_grad();
   
     const std::vector<Tensor>& parameters() const noexcept;
   
     std::vector<Tensor>& parameters() noexcept;
   
     size_t size() const noexcept;
   
     virtual void save(serialize::OutputArchive& archive) const;
     virtual void load(serialize::InputArchive& archive);
   
    protected:
     OptimizerBase() = default;
   
     template <typename T>
     T& buffer_at(std::vector<T>& buffers, size_t index) {
       if (buffers.size() <= index) {
         const auto old_size = buffers.size();
         buffers.resize(index + 1);
         std::fill(buffers.begin() + old_size, buffers.end(), T{0});
       }
       return buffers[index];
     }
   
     Tensor& buffer_at(std::vector<Tensor>& buffers, size_t index);
   
     std::vector<Tensor> parameters_;
   };
   
   serialize::OutputArchive& operator<<(
       serialize::OutputArchive& archive,
       const OptimizerBase& optimizer);
   
   serialize::InputArchive& operator>>(
       serialize::InputArchive& archive,
       OptimizerBase& optimizer);
   } // namespace detail
   
   class Optimizer : public detail::OptimizerBase {
    public:
     using detail::OptimizerBase::OptimizerBase;
     virtual void step() = 0;
   };
   
   class LossClosureOptimizer : public detail::OptimizerBase {
    public:
     using LossClosure = std::function<Tensor()>;
     using detail::OptimizerBase::OptimizerBase;
     virtual Tensor step(LossClosure closure) = 0;
   };
   
   } // namespace optim
   } // namespace torch
