:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_nn_functional_pooling.h:

Program Listing for File pooling.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_nn_functional_pooling.h>` (``torch/csrc/api/include/torch/nn/functional/pooling.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <torch/nn/options/pooling.h>
   
   namespace torch {
   namespace nn{
   namespace functional {
   
   inline Tensor avg_pool1d(const Tensor& input, const AvgPool1dOptions& options) {
     return torch::avg_pool1d(
         input,
         options.kernel_size_,
         options.stride_,
         options.padding_,
         options.ceil_mode_,
         options.count_include_pad_);
   }
   
   inline Tensor avg_pool2d(const Tensor& input, const AvgPool2dOptions& options) {
     return torch::avg_pool2d(
         input,
         options.kernel_size_,
         options.stride_,
         options.padding_,
         options.ceil_mode_,
         options.count_include_pad_,
         options.divisor_override_);
   }
   
   inline Tensor avg_pool3d(const Tensor& input, const AvgPool3dOptions& options) {
     return torch::avg_pool3d(
         input,
         options.kernel_size_,
         options.stride_,
         options.padding_,
         options.ceil_mode_,
         options.count_include_pad_,
         options.divisor_override_);
   }
   
   // ============================================================================
   
   inline Tensor max_pool1d(const Tensor& input, const MaxPool1dOptions& options) {
      return torch::max_pool1d(
         input,
         options.kernel_size_,
         options.stride_,
         options.padding_,
         options.dilation_,
         options.ceil_mode_);
   }
   
   inline Tensor max_pool2d(const Tensor& input, const MaxPool2dOptions& options) {
     return torch::max_pool2d(
         input,
         options.kernel_size_,
         options.stride_,
         options.padding_,
         options.dilation_,
         options.ceil_mode_);
   }
   
   inline Tensor max_pool3d(const Tensor& input, const MaxPool3dOptions& options) {
     return torch::max_pool3d(
         input,
         options.kernel_size_,
         options.stride_,
         options.padding_,
         options.dilation_,
         options.ceil_mode_);
   }
   
   } // namespace functional
   } // namespace nn
   } // namespace torch
