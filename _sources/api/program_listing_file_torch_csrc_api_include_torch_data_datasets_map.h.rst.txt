:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_data_datasets_map.h:

Program Listing for File map.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_data_datasets_map.h>` (``torch/csrc/api/include/torch/data/datasets/map.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: none

   #pragma once
   
   #include <torch/data/datasets/base.h>
   #include <torch/types.h>
   
   #include <ATen/core/ArrayRef.h>
   
   #include <cstddef>
   #include <utility>
   
   namespace torch {
   namespace data {
   namespace datasets {
   
   template <typename SourceDataset, typename AppliedTransform>
   struct MapDataset : BatchDataset<
                           MapDataset<SourceDataset, AppliedTransform>,
                           typename AppliedTransform::OutputBatchType,
                           typename SourceDataset::BatchRequestType> {
     using DatasetType = SourceDataset;
     using TransformType = AppliedTransform;
     using BatchRequestType = typename SourceDataset::BatchRequestType;
     using OutputBatchType = typename TransformType::OutputBatchType;
   
     MapDataset(DatasetType dataset, TransformType transform)
         : dataset(std::move(dataset)), transform(std::move(transform)) {}
   
     OutputBatchType get_batch(BatchRequestType indices) override {
       return transform.apply_batch(dataset.get_batch(indices));
     }
   
     optional<size_t> size() const noexcept {
       return dataset.size();
     }
   
     SourceDataset dataset;
     AppliedTransform transform;
   };
   
   template <typename DatasetType, typename TransformType>
   MapDataset<DatasetType, TransformType> map(
       DatasetType dataset,
       TransformType transform) {
     static_assert(
         std::is_same<
             typename DatasetType::BatchType,
             typename TransformType::InputBatchType>::value,
         "BatchType type of dataset does not match input type of transform");
     return {std::move(dataset), std::move(transform)};
   }
   
   } // namespace datasets
   } // namespace data
   } // namespace torch
