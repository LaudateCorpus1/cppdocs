:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_serialize_input-archive.h:

Program Listing for File input-archive.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_serialize_input-archive.h>` (``torch/csrc/api/include/torch/serialize/input-archive.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <c10/util/Optional.h>
   #include <c10/core/Device.h>
   #include <torch/csrc/WindowsTorchApiMacro.h>
   #include <torch/types.h>
   
   #include <iosfwd>
   #include <memory>
   #include <string>
   #include <utility>
   
   namespace at {
   class Tensor;
   } // namespace at
   
   namespace torch {
   using at::Tensor;
   namespace jit {
   namespace script {
   struct Module;
   } // namespace script
   } // namespace jit
   } // namespace torch
   
   namespace torch {
   namespace serialize {
   
   class TORCH_API InputArchive final {
    public:
     InputArchive();
   
     // Move is allowed.
     InputArchive(InputArchive&&) = default;
     InputArchive& operator=(InputArchive&&) = default;
   
     // Copy is disallowed.
     InputArchive(InputArchive&) = delete;
     InputArchive& operator=(InputArchive&) = delete;
   
     ~InputArchive() = default;
   
     bool try_read(const std::string& key, Tensor& tensor, bool is_buffer = false);
   
     void read(const std::string& key, Tensor& tensor, bool is_buffer = false);
   
     bool try_read(const std::string& key, InputArchive& archive);
   
     void read(const std::string& key, InputArchive& archive);
   
     void load_from(const std::string& filename,
         c10::optional<torch::Device> device = c10::nullopt);
   
     void load_from(std::istream& stream,
         c10::optional<torch::Device> device = c10::nullopt);
   
     template <typename... Ts>
     void operator()(Ts&&... ts) {
       read(std::forward<Ts>(ts)...);
     }
   
    private:
     std::shared_ptr<jit::script::Module> module_;
   };
   } // namespace serialize
   } // namespace torch
