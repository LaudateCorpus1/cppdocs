:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_nn_options_pooling.h:

Program Listing for File pooling.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_nn_options_pooling.h>` (``torch/csrc/api/include/torch/nn/options/pooling.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <torch/arg.h>
   #include <torch/csrc/WindowsTorchApiMacro.h>
   #include <torch/expanding_array.h>
   #include <torch/nn/options/common.h>
   #include <torch/types.h>
   
   namespace torch {
   namespace nn {
   
   template <size_t D>
   struct AvgPoolOptions {
     AvgPoolOptions(ExpandingArray<D> kernel_size)
         : kernel_size_(kernel_size), stride_(kernel_size) {}
   
     TORCH_ARG(ExpandingArray<D>, kernel_size);
   
     TORCH_ARG(ExpandingArray<D>, stride);
   
     TORCH_ARG(ExpandingArray<D>, padding) = 0;
   
     TORCH_ARG(bool, ceil_mode) = false;
   
     TORCH_ARG(bool, count_include_pad) = true;
   
     TORCH_ARG(c10::optional<int64_t>, divisor_override) = c10::nullopt;
   };
   
   using AvgPool1dOptions = AvgPoolOptions<1>;
   
   using AvgPool2dOptions = AvgPoolOptions<2>;
   
   using AvgPool3dOptions = AvgPoolOptions<3>;
   
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AvgPool1d, AvgPool1dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AvgPool2d, AvgPool2dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AvgPool3d, AvgPool3dFuncOptions)
   
   // ============================================================================
   
   template <size_t D>
   struct MaxPoolOptions {
     MaxPoolOptions(ExpandingArray<D> kernel_size)
         : kernel_size_(kernel_size), stride_(kernel_size) {}
   
     TORCH_ARG(ExpandingArray<D>, kernel_size);
   
     TORCH_ARG(ExpandingArray<D>, stride);
   
     TORCH_ARG(ExpandingArray<D>, padding) = 0;
   
     TORCH_ARG(ExpandingArray<D>, dilation) = 1;
   
     TORCH_ARG(bool, ceil_mode) = false;
   };
   
   using MaxPool1dOptions = MaxPoolOptions<1>;
   
   using MaxPool2dOptions = MaxPoolOptions<2>;
   
   using MaxPool3dOptions = MaxPoolOptions<3>;
   
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(MaxPool1d, MaxPool1dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(MaxPool2d, MaxPool2dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(MaxPool3d, MaxPool3dFuncOptions)
   
   // ============================================================================
   
   template <size_t D>
   struct AdaptiveMaxPoolOptions {
     AdaptiveMaxPoolOptions(ExpandingArray<D> output_size)
         : output_size_(output_size) {}
   
     TORCH_ARG(ExpandingArray<D>, output_size);
   };
   
   using AdaptiveMaxPool1dOptions = AdaptiveMaxPoolOptions<1>;
   
   using AdaptiveMaxPool2dOptions = AdaptiveMaxPoolOptions<2>;
   
   using AdaptiveMaxPool3dOptions = AdaptiveMaxPoolOptions<3>;
   
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AdaptiveMaxPool1d, AdaptiveMaxPool1dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AdaptiveMaxPool2d, AdaptiveMaxPool2dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AdaptiveMaxPool3d, AdaptiveMaxPool3dFuncOptions)
   
   // ============================================================================
   
   template <size_t D>
   struct AdaptiveAvgPoolOptions {
     AdaptiveAvgPoolOptions(ExpandingArray<D> output_size)
         : output_size_(output_size) {}
   
     TORCH_ARG(ExpandingArray<D>, output_size);
   };
   
   using AdaptiveAvgPool1dOptions = AdaptiveAvgPoolOptions<1>;
   
   using AdaptiveAvgPool2dOptions = AdaptiveAvgPoolOptions<2>;
   
   using AdaptiveAvgPool3dOptions = AdaptiveAvgPoolOptions<3>;
   
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AdaptiveAvgPool1d, AdaptiveAvgPool1dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AdaptiveAvgPool2d, AdaptiveAvgPool2dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(AdaptiveAvgPool3d, AdaptiveAvgPool3dFuncOptions)
   
   // ============================================================================
   
   template <size_t D>
   struct MaxUnpoolOptions {
     MaxUnpoolOptions(ExpandingArray<D> kernel_size)
         : kernel_size_(kernel_size), stride_(kernel_size) {}
   
     TORCH_ARG(ExpandingArray<D>, kernel_size);
   
     TORCH_ARG(ExpandingArray<D>, stride);
   
     TORCH_ARG(ExpandingArray<D>, padding) = 0;
   };
   
   using MaxUnpool1dOptions = MaxUnpoolOptions<1>;
   
   using MaxUnpool2dOptions = MaxUnpoolOptions<2>;
   
   using MaxUnpool3dOptions = MaxUnpoolOptions<3>;
   
   // ============================================================================
   
   namespace functional {
   
   template <size_t D>
   struct MaxUnpoolFuncOptions {
     MaxUnpoolFuncOptions(ExpandingArray<D> kernel_size)
         : kernel_size_(kernel_size), stride_(kernel_size) {}
   
     TORCH_ARG(ExpandingArray<D>, kernel_size);
   
     TORCH_ARG(ExpandingArray<D>, stride);
   
     TORCH_ARG(ExpandingArray<D>, padding) = 0;
   
     TORCH_ARG(c10::optional<std::vector<int64_t>>, output_size) = c10::nullopt;
   };
   
   using MaxUnpool1dFuncOptions = MaxUnpoolFuncOptions<1>;
   
   using MaxUnpool2dFuncOptions = MaxUnpoolFuncOptions<2>;
   
   using MaxUnpool3dFuncOptions = MaxUnpoolFuncOptions<3>;
   
   } // namespace functional
   
   // ============================================================================
   
   template <size_t D>
   struct FractionalMaxPoolOptions {
     FractionalMaxPoolOptions(ExpandingArray<D> kernel_size)
         : kernel_size_(kernel_size) {}
   
     TORCH_ARG(ExpandingArray<D>, kernel_size);
   
     TORCH_ARG(c10::optional<ExpandingArray<D>>, output_size) = c10::nullopt;
   
     TORCH_ARG(c10::optional<ExpandingArray<D>>, output_ratio) = c10::nullopt;
   
     TORCH_ARG(torch::Tensor, _random_samples) = Tensor();
   };
   
   using FractionalMaxPool2dOptions = FractionalMaxPoolOptions<2>;
   
   using FractionalMaxPool3dOptions = FractionalMaxPoolOptions<3>;
   
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(FractionalMaxPool2d, FractionalMaxPool2dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(FractionalMaxPool3d, FractionalMaxPool3dFuncOptions)
   
   // ============================================================================
   
   template <size_t D>
   struct LPPoolOptions {
     LPPoolOptions(double norm_type, ExpandingArray<D> kernel_size)
         : norm_type_(norm_type), kernel_size_(kernel_size), stride_(kernel_size) {}
   
     TORCH_ARG(double, norm_type);
   
     // the size of the window to take an average over
     TORCH_ARG(ExpandingArray<D>, kernel_size);
   
     // the stride of the window. Default value is `kernel_size`
     TORCH_ARG(ExpandingArray<D>, stride);
   
     // when True, will use `ceil` instead of `floor` to compute the output shape
     TORCH_ARG(bool, ceil_mode) = false;
   };
   
   using LPPool1dOptions = LPPoolOptions<1>;
   
   using LPPool2dOptions = LPPoolOptions<2>;
   
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(LPPool1d, LPPool1dFuncOptions)
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(LPPool2d, LPPool2dFuncOptions)
   
   } // namespace nn
   } // namespace torch
