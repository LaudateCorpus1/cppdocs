:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_optim_sgd.h:

Program Listing for File sgd.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_optim_sgd.h>` (``torch/csrc/api/include/torch/optim/sgd.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <torch/arg.h>
   #include <torch/nn/module.h>
   #include <torch/optim/optimizer.h>
   #include <torch/types.h>
   
   #include <cstddef>
   #include <utility>
   #include <vector>
   
   namespace torch {
   namespace serialize {
   class OutputArchive;
   class InputArchive;
   } // namespace serialize
   } // namespace torch
   
   namespace torch {
   namespace optim {
   
   struct TORCH_API SGDOptions {
     /* implicit */ SGDOptions(double learning_rate);
     TORCH_ARG(double, learning_rate);
     TORCH_ARG(double, momentum) = 0;
     TORCH_ARG(double, dampening) = 0;
     TORCH_ARG(double, weight_decay) = 0;
     TORCH_ARG(bool, nesterov) = false;
   };
   
   class TORCH_API SGD : public Optimizer {
    public:
     template <typename ParameterContainer>
     explicit SGD(ParameterContainer&& parameters, const SGDOptions& options_)
         : Optimizer(std::forward<ParameterContainer>(parameters)),
           options(options_) {}
   
     void step() override;
   
     void save(serialize::OutputArchive& archive) const override;
     void load(serialize::InputArchive& archive) override;
   
     SGDOptions options;
   
     std::vector<Tensor> momentum_buffers;
   
    private:
     SGD() : options(0) {}
   
     size_t iteration_{0};
   };
   } // namespace optim
   } // namespace torch
