:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_linalg.h:

Program Listing for File linalg.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_linalg.h>` (``torch/csrc/api/include/torch/linalg.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <ATen/ATen.h>
   
   namespace torch {
   namespace linalg {
   
   #ifndef DOXYGEN_SHOULD_SKIP_THIS
   namespace detail {
   
   inline Tensor cholesky(const Tensor& self) {
     return torch::linalg_cholesky(self);
   }
   
   inline Tensor cholesky_out(Tensor& result, const Tensor& self) {
     return torch::linalg_cholesky_out(result, self);
   }
   
   inline Tensor det(const Tensor& self) {
     return torch::linalg_det(self);
   }
   
   inline Tensor norm(const Tensor& self, optional<Scalar> opt_ord, optional<IntArrayRef> opt_dim, bool keepdim, optional<ScalarType> opt_dtype) {
     return torch::linalg_norm(self, opt_ord, opt_dim, keepdim, opt_dtype);
   }
   
   inline Tensor norm(const Tensor& self, std::string ord, optional<IntArrayRef> opt_dim, bool keepdim, optional<ScalarType> opt_dtype) {
     return torch::linalg_norm(self, ord, opt_dim, keepdim, opt_dtype);
   }
   
   inline Tensor& norm_out(Tensor& result, const Tensor& self, optional<Scalar> opt_ord, optional<IntArrayRef> opt_dim, bool keepdim, optional<ScalarType> opt_dtype) {
     return torch::linalg_norm_out(result, self, opt_ord, opt_dim, keepdim, opt_dtype);
   }
   
   inline Tensor& norm_out(Tensor& result, const Tensor& self, std::string ord, optional<IntArrayRef> opt_dim, bool keepdim, optional<ScalarType> opt_dtype) {
     return torch::linalg_norm_out(result, self, ord, opt_dim, keepdim, opt_dtype);
   }
   
   inline Tensor tensorsolve(const Tensor& self, const Tensor& other, optional<IntArrayRef> dims) {
     return torch::linalg_tensorsolve(self, other, dims);
   }
   
   inline Tensor& tensorsolve_out(Tensor& result, const Tensor& self, const Tensor& other, optional<IntArrayRef> dims) {
     return torch::linalg_tensorsolve_out(result, self, other, dims);
   }
   
   } // namespace detail
   #endif /* DOXYGEN_SHOULD_SKIP_THIS */
   
   inline Tensor cholesky(const Tensor& self) {
     return detail::cholesky(self);
   }
   
   inline Tensor cholesky_out(Tensor& result, const Tensor& self) {
     return detail::cholesky_out(result, self);
   }
   
   inline Tensor linalg_det(const Tensor& self) {
     return detail::det(self);
   }
   
   inline Tensor linalg_norm(const Tensor& self, optional<Scalar> opt_ord, optional<IntArrayRef> opt_dim, bool keepdim, optional<ScalarType> opt_dtype) {
     return detail::norm(self, opt_ord, opt_dim, keepdim, opt_dtype);
   }
   
   inline Tensor linalg_norm(const Tensor& self, std::string ord, optional<IntArrayRef> opt_dim, bool keepdim, optional<ScalarType> opt_dtype) {
     return detail::norm(self, ord, opt_dim, keepdim, opt_dtype);
   }
   
   inline Tensor& linalg_norm_out(Tensor& result, const Tensor& self, optional<Scalar> opt_ord, optional<IntArrayRef> opt_dim, bool keepdim, optional<ScalarType> opt_dtype) {
     return detail::norm_out(result, self, opt_ord, opt_dim, keepdim, opt_dtype);
   }
   
   inline Tensor& linalg_norm_out(Tensor& result, const Tensor& self, std::string ord, optional<IntArrayRef> opt_dim, bool keepdim, optional<ScalarType> opt_dtype) {
     return detail::norm_out(result, self, ord, opt_dim, keepdim, opt_dtype);
   }
   
   inline Tensor tensorsolve(const Tensor& input, const Tensor& other, optional<IntArrayRef> dims) {
     return detail::tensorsolve(input, other, dims);
   }
   
   inline Tensor& tensorsolve_out(Tensor& result, const Tensor& input, const Tensor& other, optional<IntArrayRef> dims) {
     return detail::tensorsolve_out(result, input, other, dims);
   }
   
   }} // torch::linalg
