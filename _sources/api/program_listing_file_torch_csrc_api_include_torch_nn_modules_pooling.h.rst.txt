:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_nn_modules_pooling.h:

Program Listing for File pooling.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_nn_modules_pooling.h>` (``torch/csrc/api/include/torch/nn/modules/pooling.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <torch/expanding_array.h>
   #include <torch/nn/cloneable.h>
   #include <torch/nn/options/pooling.h>
   #include <torch/nn/functional/pooling.h>
   
   #include <torch/csrc/WindowsTorchApiMacro.h>
   
   namespace torch {
   namespace nn {
   
   template <size_t D, typename Derived>
   class TORCH_API AvgPoolImpl : public torch::nn::Cloneable<Derived> {
    public:
     AvgPoolImpl(ExpandingArray<D> kernel_size)
         : AvgPoolImpl(AvgPoolOptions<D>(kernel_size)) {}
     explicit AvgPoolImpl(const AvgPoolOptions<D>& options_);
   
     void reset() override;
   
     void pretty_print(std::ostream& stream) const override;
   
     AvgPoolOptions<D> options;
   };
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AvgPool1d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AvgPool1dImpl : public AvgPoolImpl<1, AvgPool1dImpl> {
    public:
     using AvgPoolImpl<1, AvgPool1dImpl>::AvgPoolImpl;
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(AvgPool1d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AvgPool2d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AvgPool2dImpl : public AvgPoolImpl<2, AvgPool2dImpl> {
    public:
     using AvgPoolImpl<2, AvgPool2dImpl>::AvgPoolImpl;
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(AvgPool2d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AvgPool3d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AvgPool3dImpl : public AvgPoolImpl<3, AvgPool3dImpl> {
    public:
     using AvgPoolImpl<3, AvgPool3dImpl>::AvgPoolImpl;
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(AvgPool3d);
   
   // ============================================================================
   
   template <size_t D, typename Derived>
   class TORCH_API MaxPoolImpl : public torch::nn::Cloneable<Derived> {
    public:
     MaxPoolImpl(ExpandingArray<D> kernel_size)
         : MaxPoolImpl(MaxPoolOptions<D>(kernel_size)) {}
     explicit MaxPoolImpl(const MaxPoolOptions<D>& options_);
   
     void reset() override;
   
     void pretty_print(std::ostream& stream) const override;
   
     MaxPoolOptions<D> options;
   };
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MaxPool1d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API MaxPool1dImpl : public MaxPoolImpl<1, MaxPool1dImpl> {
    public:
     using MaxPoolImpl<1, MaxPool1dImpl>::MaxPoolImpl;
     Tensor forward(const Tensor& input);
   
     std::tuple<Tensor, Tensor> forward_with_indices(const Tensor& input);
   };
   
   TORCH_MODULE(MaxPool1d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MaxPool2d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API MaxPool2dImpl : public MaxPoolImpl<2, MaxPool2dImpl> {
    public:
     using MaxPoolImpl<2, MaxPool2dImpl>::MaxPoolImpl;
     Tensor forward(const Tensor& input);
   
     std::tuple<Tensor, Tensor> forward_with_indices(const Tensor& input);
   };
   
   TORCH_MODULE(MaxPool2d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MaxPool3d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API MaxPool3dImpl : public MaxPoolImpl<3, MaxPool3dImpl> {
    public:
     using MaxPoolImpl<3, MaxPool3dImpl>::MaxPoolImpl;
     Tensor forward(const Tensor& input);
   
     std::tuple<Tensor, Tensor> forward_with_indices(const Tensor& input);
   };
   
   TORCH_MODULE(MaxPool3d);
   
   // ============================================================================
   
   template <size_t D, typename Derived>
   class TORCH_API AdaptiveMaxPoolImpl : public torch::nn::Cloneable<Derived> {
    public:
     AdaptiveMaxPoolImpl(ExpandingArray<D> output_size)
         : AdaptiveMaxPoolImpl(AdaptiveMaxPoolOptions<D>(output_size)) {}
     explicit AdaptiveMaxPoolImpl(const AdaptiveMaxPoolOptions<D>& options_);
   
     void reset() override;
   
     void pretty_print(std::ostream& stream) const override;
   
     AdaptiveMaxPoolOptions<D> options;
   };
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~ AdaptiveMaxPool1d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AdaptiveMaxPool1dImpl :
     public AdaptiveMaxPoolImpl<1, AdaptiveMaxPool1dImpl> {
    public:
     using AdaptiveMaxPoolImpl<1, AdaptiveMaxPool1dImpl>::AdaptiveMaxPoolImpl;
   
     Tensor forward(const Tensor& input);
   
     std::tuple<Tensor, Tensor> forward_with_indices(const Tensor& input);
   };
   
   TORCH_MODULE(AdaptiveMaxPool1d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AdaptiveMaxPool2d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AdaptiveMaxPool2dImpl :
     public AdaptiveMaxPoolImpl<2, AdaptiveMaxPool2dImpl> {
    public:
     using AdaptiveMaxPoolImpl<2, AdaptiveMaxPool2dImpl>::AdaptiveMaxPoolImpl;
   
     Tensor forward(const Tensor& input);
   
     std::tuple<Tensor, Tensor> forward_with_indices(const Tensor& input);
   };
   
   TORCH_MODULE(AdaptiveMaxPool2d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ AdaptiveMaxPool3d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AdaptiveMaxPool3dImpl :
     public AdaptiveMaxPoolImpl<3, AdaptiveMaxPool3dImpl> {
    public:
     using AdaptiveMaxPoolImpl<3, AdaptiveMaxPool3dImpl>::AdaptiveMaxPoolImpl;
   
     Tensor forward(const Tensor& input);
   
     std::tuple<Tensor, Tensor> forward_with_indices(const Tensor& input);
   };
   
   TORCH_MODULE(AdaptiveMaxPool3d);
   
   // ============================================================================
   
   template <size_t D, typename Derived>
   class TORCH_API AdaptiveAvgPoolImpl : public torch::nn::Cloneable<Derived> {
    public:
     AdaptiveAvgPoolImpl(ExpandingArray<D> output_size)
         : AdaptiveAvgPoolImpl(AdaptiveAvgPoolOptions<D>(output_size)) {}
     explicit AdaptiveAvgPoolImpl(const AdaptiveAvgPoolOptions<D>& options_);
   
     void reset() override;
   
     void pretty_print(std::ostream& stream) const override;
   
     AdaptiveAvgPoolOptions<D> options;
   };
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~ AdaptiveAvgPool1d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AdaptiveAvgPool1dImpl :
     public AdaptiveAvgPoolImpl<1, AdaptiveAvgPool1dImpl> {
    public:
     using AdaptiveAvgPoolImpl<1, AdaptiveAvgPool1dImpl>::AdaptiveAvgPoolImpl;
   
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(AdaptiveAvgPool1d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~ AdaptiveAvgPool2d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AdaptiveAvgPool2dImpl :
     public AdaptiveAvgPoolImpl<2, AdaptiveAvgPool2dImpl> {
    public:
     using AdaptiveAvgPoolImpl<2, AdaptiveAvgPool2dImpl>::AdaptiveAvgPoolImpl;
   
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(AdaptiveAvgPool2d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~ AdaptiveAvgPool3d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API AdaptiveAvgPool3dImpl :
     public AdaptiveAvgPoolImpl<3, AdaptiveAvgPool3dImpl> {
    public:
     using AdaptiveAvgPoolImpl<3, AdaptiveAvgPool3dImpl>::AdaptiveAvgPoolImpl;
   
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(AdaptiveAvgPool3d);
   
   // ============================================================================
   
   template <size_t D, typename Derived>
   class TORCH_API MaxUnpoolImpl : public torch::nn::Cloneable<Derived> {
    public:
     MaxUnpoolImpl(ExpandingArray<D> kernel_size)
         : MaxUnpoolImpl(MaxUnpoolOptions<D>(kernel_size)) {}
     explicit MaxUnpoolImpl(const MaxUnpoolOptions<D>& options_);
   
     void reset() override;
   
     void pretty_print(std::ostream& stream) const override;
   
     MaxUnpoolOptions<D> options;
   };
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MaxUnpool1d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API MaxUnpool1dImpl : public MaxUnpoolImpl<1, MaxUnpool1dImpl> {
    public:
     using MaxUnpoolImpl<1, MaxUnpool1dImpl>::MaxUnpoolImpl;
     Tensor forward(const Tensor& input, const Tensor& indices,
                    const c10::optional<IntArrayRef>& output_size = c10::nullopt);
   };
   
   TORCH_MODULE(MaxUnpool1d);
   
   } // namespace nn
   } // namespace torch
