:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_fft.h:

Program Listing for File fft.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_fft.h>` (``torch/csrc/api/include/torch/fft.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <ATen/ATen.h>
   
   namespace torch {
   namespace fft {
   
   inline Tensor fft(const Tensor& self,
                     c10::optional<int64_t> n=c10::nullopt,
                     int64_t dim=-1,
                     c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_fft(self, n, dim, norm);
   }
   
   inline Tensor ifft(const Tensor& self,
                     c10::optional<int64_t> n=c10::nullopt,
                     int64_t dim=-1,
                     c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_ifft(self, n, dim, norm);
   }
   
   inline Tensor fftn(const Tensor& self,
                      c10::optional<IntArrayRef> s=c10::nullopt,
                      c10::optional<IntArrayRef> dim=c10::nullopt,
                      c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_fftn(self, s, dim, norm);
   }
   
   inline Tensor ifftn(const Tensor& self,
                      c10::optional<IntArrayRef> s=c10::nullopt,
                      c10::optional<IntArrayRef> dim=c10::nullopt,
                      c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_ifftn(self, s, dim, norm);
   }
   
   inline Tensor rfft(const Tensor& self,
                     c10::optional<int64_t> n=c10::nullopt,
                     int64_t dim=-1,
                     c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_rfft(self, n, dim, norm);
   }
   
   inline Tensor irfft(const Tensor& self,
                       c10::optional<int64_t> n=c10::nullopt,
                       int64_t dim=-1,
                       c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_irfft(self, n, dim, norm);
   }
   
   inline Tensor rfftn(const Tensor& self,
                       c10::optional<IntArrayRef> s=c10::nullopt,
                       c10::optional<IntArrayRef> dim=c10::nullopt,
                       c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_rfftn(self, s, dim, norm);
   }
   
   inline Tensor irfftn(const Tensor& self,
                      c10::optional<IntArrayRef> s=c10::nullopt,
                      c10::optional<IntArrayRef> dim=c10::nullopt,
                      c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_irfftn(self, s, dim, norm);
   }
   
   inline Tensor hfft(const Tensor& self,
                      c10::optional<int64_t> n=c10::nullopt,
                      int64_t dim=-1,
                      c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_hfft(self, n, dim, norm);
   }
   
   inline Tensor ihfft(const Tensor& self,
                       c10::optional<int64_t> n=c10::nullopt,
                       int64_t dim=-1,
                       c10::optional<std::string> norm=c10::nullopt) {
     return torch::fft_ihfft(self, n, dim, norm);
   }
   
   inline Tensor fftfreq(int64_t n, double d, const TensorOptions& options={}) {
     return torch::fft_fftfreq(n, d, options);
   }
   
   inline Tensor fftfreq(int64_t n, const TensorOptions& options={}) {
     return torch::fft_fftfreq(n, /*d=*/1.0, options);
   }
   
   inline Tensor rfftfreq(int64_t n, double d, const TensorOptions& options) {
     return torch::fft_rfftfreq(n, d, options);
   }
   
   inline Tensor rfftfreq(int64_t n, const TensorOptions& options) {
     return torch::fft_rfftfreq(n, /*d=*/1.0, options);
   }
   
   inline Tensor fftshift(const Tensor& x, c10::optional<IntArrayRef> dim=c10::nullopt) {
     return torch::fft_fftshift(x, dim);
   }
   
   inline Tensor ifftshift(const Tensor& x, c10::optional<IntArrayRef> dim=c10::nullopt) {
     return torch::fft_ifftshift(x, dim);
   }
   
   }} // torch::fft
