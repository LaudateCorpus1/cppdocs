:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_nn_options_activation.h:

Program Listing for File activation.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_nn_options_activation.h>` (``torch/csrc/api/include/torch/nn/options/activation.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <torch/arg.h>
   #include <torch/csrc/WindowsTorchApiMacro.h>
   #include <torch/types.h>
   
   namespace torch {
   namespace nn {
   
   struct TORCH_API ELUOptions {
     TORCH_ARG(double, alpha) = 1.0;
   
     TORCH_ARG(bool, inplace) = false;
   };
   
   // ============================================================================
   
   struct TORCH_API SELUOptions {
     /* implicit */ SELUOptions(bool inplace = false);
   
     TORCH_ARG(bool, inplace);
   };
   
   // ============================================================================
   
   struct TORCH_API HardshrinkOptions {
     /* implicit */ HardshrinkOptions(double lambda = 0.5);
   
     TORCH_ARG(double, lambda);
   };
   
   // ============================================================================
   
   struct TORCH_API HardtanhOptions {
     TORCH_ARG(double, min_val) = -1.0;
   
     TORCH_ARG(double, max_val) = 1.0;
   
     TORCH_ARG(bool, inplace) = false;
   };
   
   // ============================================================================
   
   struct TORCH_API LeakyReLUOptions {
     TORCH_ARG(double, negative_slope) = 1e-2;
   
     TORCH_ARG(bool, inplace) = false;
   };
   
   // ============================================================================
   
   struct TORCH_API SoftmaxOptions {
     SoftmaxOptions(int64_t dim);
   
     // Dimension along which Softmax will be computed.
     TORCH_ARG(int64_t, dim);
   };
   
   // ============================================================================
   
   struct TORCH_API PReLUOptions {
     TORCH_ARG(int64_t, num_parameters) = 1;
   
     TORCH_ARG(double, init) = 0.25;
   };
   
   } // namespace nn
   } // namespace torch
