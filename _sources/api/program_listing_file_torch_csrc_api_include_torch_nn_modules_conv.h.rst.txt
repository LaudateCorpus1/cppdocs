:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_nn_modules_conv.h:

Program Listing for File conv.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_nn_modules_conv.h>` (``torch/csrc/api/include/torch/nn/modules/conv.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <torch/expanding_array.h>
   #include <torch/nn/cloneable.h>
   #include <torch/nn/options/conv.h>
   #include <torch/nn/pimpl.h>
   #include <torch/types.h>
   
   #include <torch/csrc/WindowsTorchApiMacro.h>
   
   #include <cstddef>
   #include <vector>
   
   namespace torch {
   namespace nn {
   
   template <size_t D, typename Derived>
   class TORCH_API ConvImpl : public torch::nn::Cloneable<Derived> {
    public:
     explicit ConvImpl(ConvOptions<D> options_);
   
     void reset() override;
   
     void reset_parameters();
   
     void pretty_print(std::ostream& stream) const override;
   
     ConvOptions<D> options;
   
     Tensor weight;
   
     Tensor bias;
   };
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Conv1d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API Conv1dImpl : public ConvImpl<1, Conv1dImpl> {
    public:
     Conv1dImpl(
         int64_t input_channels,
         int64_t output_channels,
         ExpandingArray<1> kernel_size)
         : Conv1dImpl(ConvOptions<1>(input_channels, output_channels, kernel_size)) {
     }
     explicit Conv1dImpl(ConvOptions<1> options_);
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(Conv1d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Conv2d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API Conv2dImpl : public ConvImpl<2, Conv2dImpl> {
    public:
     Conv2dImpl(
         int64_t input_channels,
         int64_t output_channels,
         ExpandingArray<2> kernel_size)
         : Conv2dImpl(ConvOptions<2>(input_channels, output_channels, kernel_size)) {
     }
     explicit Conv2dImpl(ConvOptions<2> options_);
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(Conv2d);
   
   // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Conv3d ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
   class TORCH_API Conv3dImpl : public ConvImpl<3, Conv3dImpl> {
    public:
     Conv3dImpl(
         int64_t input_channels,
         int64_t output_channels,
         ExpandingArray<3> kernel_size)
         : Conv3dImpl(ConvOptions<3>(input_channels, output_channels, kernel_size)) {
     }
     explicit Conv3dImpl(ConvOptions<3> options_);
     Tensor forward(const Tensor& input);
   };
   
   TORCH_MODULE(Conv3d);
   
   } // namespace nn
   } // namespace torch
