:github_url: https://github.com/pytorch/pytorch


.. _program_listing_file_torch_csrc_api_include_torch_nn_options_normalization.h:

Program Listing for File normalization.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_torch_csrc_api_include_torch_nn_options_normalization.h>` (``torch/csrc/api/include/torch/nn/options/normalization.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <torch/arg.h>
   #include <torch/csrc/WindowsTorchApiMacro.h>
   #include <torch/nn/options/common.h>
   #include <torch/types.h>
   #include <vector>
   
   namespace torch {
   namespace nn {
   
   struct TORCH_API LayerNormOptions {
     /* implicit */ LayerNormOptions(std::vector<int64_t> normalized_shape);
     TORCH_ARG(std::vector<int64_t>, normalized_shape);
     TORCH_ARG(double, eps) = 1e-5;
     TORCH_ARG(bool, elementwise_affine) = true;
   };
   
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(LayerNorm, LayerNormFuncOptions)
   
   // ============================================================================
   
   struct TORCH_API LocalResponseNormOptions {
     /* implicit */ LocalResponseNormOptions(int64_t size) : size_(size) {}
     TORCH_ARG(int64_t, size);
   
     TORCH_ARG(double, alpha) = 1e-4;
   
     TORCH_ARG(double, beta) = 0.75;
   
     TORCH_ARG(double, k) = 1.;
   };
   
   TORCH_NN_FUNCTIONAL_USE_MODULE_OPTIONS(LocalResponseNorm, LocalResponseNormFuncOptions)
   
   // ============================================================================
   
   struct TORCH_API CrossMapLRN2dOptions {
     CrossMapLRN2dOptions(int64_t size);
   
     TORCH_ARG(int64_t, size);
   
     TORCH_ARG(double, alpha) = 1e-4;
   
     TORCH_ARG(double, beta) = 0.75;
   
     TORCH_ARG(int64_t, k) = 1;
   
   };
   
   // ============================================================================
   
   namespace functional {
   
   struct TORCH_API NormalizeFuncOptions {
     TORCH_ARG(double, p) = 2.0;
     TORCH_ARG(int64_t, dim) = 1;
     TORCH_ARG(double, eps) = 1e-12;
   };
   
   } // namespace functional
   
   } // namespace nn
   } // namespace torch
